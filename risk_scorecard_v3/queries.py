QUERY_SCORE_CARD = "SELECT avg(patch_compliant),avg(patch_compliant_java),avg(av_am_compliant),avg(no_critical_cvs_overdue),avg(no_high_cvs_overdue),avg(hips_compliant),avg(fim_compliant),avg(vm_monthly_scan_compliant),avg(vm_weekly_scan_compliant),avg(sast_compliant),avg(dr_compliant),avg(pentest_compliant),avg(siem_compliant) FROM scorecard_data_by_bapp"
QUERY_SCORE_CARD_AVG = "SELECT avg(bapp_score) FROM scorecard_data_by_bapp"

QUERY_SCORES_BY_VP = "select vp_owner_name, count(bapp_id), avg(bapp_score), avg(patch_compliant), avg(patch_compliant_java), avg(av_am_compliant), avg(no_critical_cvs_overdue), avg(no_high_cvs_overdue), avg(hips_compliant), avg(fim_compliant), avg(vm_monthly_scan_compliant), avg(vm_weekly_scan_compliant), avg(sast_compliant), avg(dr_compliant), avg(pentest_compliant), avg(siem_compliant) from scorecard_data_by_bapp {0} group by vp_owner_name"

QUERY_BAPP_INFORMATION = "SELECT bapp_id, bapp_name , scorecard_data_by_bapp.bapp_owner_name, av_am_compliant , patch_compliant, patch_compliant_java, no_critical_cvs_overdue, no_high_cvs_overdue ,cv_age_score_average, vm_age_score_average ,high_impact ,bapp_score FROM scorecard_data_by_bapp"

QUERY_CONTROL_FINDINGS = "select bapp_id, bapp_name, finding_id, finding_source, mandated_remediation_date, first_published, disney_severity_rating, effort, finding_short_description, archer_finding_risk_scores.risk_score, archer_findings_exported.tracking_id, archer_findings_exported.exception_status from scorecard_data_by_bapp left join archer_findings_exported on scorecard_data_by_bapp.bapp_id = ANY(string_to_array(archer_findings_exported.bapp_ids, ';')) left join archer_finding_risk_scores on archer_finding_risk_scores.tracking_id = archer_findings_exported.tracking_id {0} and finding_id is not null and finding_source not in ('AWS Inspector', 'Tenable IO', 'Qualys')"

QUERY_OPEN_VULNERABILITIES = "select q.bapp_id, bapp_name, hostname_preferred, ips_v4_preferred, CASE WHEN disney_severity = 5 THEN 'Disney-Critical' WHEN disney_severity = 4 THEN 'Disney-High' WHEN disney_severity = 3 THEN 'Disney-Moderate' WHEN disney_severity = 2 THEN 'Disney-Low' WHEN disney_severity = 1 THEN 'Disney-Info' ELSE 'Not Rated' END , last_detected::date, title, vi_age, q.high_impact, vuln_identifier, internal_axon_id, (age_score * .25) + (high_impact_score * .25) + (severity_score * .50), vuln_source, description, solution, output, port from (select hostname_preferred, ips_v4_preferred, disney_severity, CASE WHEN disney_severity = 5 THEN 100 WHEN disney_severity = 4 THEN 80 WHEN disney_severity = 3 THEN 60 WHEN disney_severity = 2 THEN 40 WHEN disney_severity = 1 THEN 20 ELSE 0 END AS severity_score, last_detected::date, title, vi_age, LEAST(100.0 * (vi_age)::numeric / (3 * 365)::numeric, 100.0) AS age_score, high_impact, CASE WHEN high_impact is null THEN 0 WHEN high_impact THEN 100 ELSE 50 END AS high_impact_score, unnest(string_to_array(CASE WHEN dae_axonius_per_vuln_dashboard_data.bapp_ids IS NULL AND dae_axonius_per_vuln_dashboard_data.segment = 'DPEP'::text THEN 'BAPPDPEPUNK'::text ELSE dae_axonius_per_vuln_dashboard_data.bapp_ids END, ','::text)) as bapp_id, type_preferred, vuln_source, vuln_identifier, internal_axon_id, description, output, solution, port from dae_axonius_per_vuln_dashboard_data where disney_severity >= (SELECT setting_value FROM settings where setting_key = 'patching_min_sev')::INT) as q left join scorecard_data_by_bapp on q.bapp_id = scorecard_data_by_bapp.bapp_id where q.bapp_id in (select bapp_id FROM scorecard_data_by_bapp {0})"

QUERY_WAVE_IDS = (
    "select distinct(wave_id) from scorecard_data_by_bapp order by wave_id desc"
)

QUERY_TOWER_NAMES = "select distinct(tower_name) from towers_v2"
